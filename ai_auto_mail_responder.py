# -*- coding: utf-8 -*-
"""AI auto mail responder

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LqqMw3ia5wTFGr1Hc7O7LgziPqELii7d
"""

pip install pytextrank

"""All the necessary modules to be imported

"""

import numpy as np
import pandas as pd
import spacy
import pytextrank
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import torch
from transformers import GPT2LMHeadModel, GPT2Tokenizer, GPT2Config
from torch.utils.data import Dataset, DataLoader
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

"""Importing the sales mail dataset"""

data = pd.read_csv("mail_data.csv")

data.head(20)

data.shape

"""Extracting mail body from the dataset to train the ML model and extracting keywords"""

mail_body = list(data.iloc[:,2].values)
print(mail_body[:10])

nlp = spacy.load("en_core_web_sm")

nlp.add_pipe("textrank")


global_keys=[]
list_mail=[]
for x in mail_body :
    key_words=[]
    csv_data = []
    doc = nlp(x)
    for phrase in doc._.phrases:
        key_words.append(phrase.text)
        global_keys.append(phrase.text)

    csv_data.append(key_words)
    csv_data.append(x)
    list_mail.append(tuple(csv_data))

df = pd.DataFrame(list_mail)
df.to_csv('mail_key_body_dataset.csv')


# print(list_mail)
print(len(global_keys))

print(global_keys)

"""Generating a wordcloud graph on the keywords/phrases extracted"""

unique_string=(" ").join(global_keys)

text_file = open("data.txt", "w")
text_file.write(unique_string)
text_file.close()

wordcloud = WordCloud(width = 1000, height = 500).generate(unique_string)
plt.figure(figsize=(15,8))
plt.imshow(wordcloud)
plt.axis("off")
plt.savefig("wordcloud_graph"+".png", bbox_inches='tight')
plt.show()
plt.close()

"""**Run this only to train model**"""

class CustomDataset(Dataset):
    def __init__(self, data):
        self.data = data

    def __len__(self):
        return len(self.data)

    def __getitem__(self, idx):
        return self.data[idx]

def fine_tune_gpt2(train_data, model_name="gpt2", output_model_path="fine_tuned_gpt2_mail"):
    # Loading the pre-trained GPT-2 model and tokenizer
    model = GPT2LMHeadModel.from_pretrained(model_name)
    tokenizer = GPT2Tokenizer.from_pretrained(model_name)

    #data for fine-tuning
    dataset = CustomDataset(train_data)
    dataloader = DataLoader(dataset, batch_size=1, shuffle=True)

    # Fine-tune the model
    model.train()
    optimizer = torch.optim.AdamW(model.parameters(), lr=1e-5)

    for epoch in range(3):
        for batch in dataloader:
            optimizer.zero_grad()
            inputs = tokenizer(batch[0], return_tensors="pt", max_length=512, truncation=True)
            outputs = model(**inputs, labels=inputs["input_ids"])
            loss = outputs.loss
            loss.backward()
            optimizer.step()

    # Saving the fine-tuned model
    model.save_pretrained(output_model_path)
    tokenizer.save_pretrained(output_model_path)

train_data = mail_body
fine_tune_gpt2(train_data)

def generate_email_with_keywords(keywords, model_path="fine_tuned_gpt2_mail"):
    # Loading fine-tuned GPT-2 model and tokenizer which was trained in the above code
    model = GPT2LMHeadModel.from_pretrained(model_path)
    tokenizer = GPT2Tokenizer.from_pretrained(model_path)

    # Preparing the input by encoding keywords
    input_text = " ".join(keywords)
    input_ids = tokenizer.encode(input_text, return_tensors="pt")

    # Generate email using the fine-tuned model
    max_length = 300
    output = model.generate(input_ids, max_length=max_length, num_return_sequences=1, no_repeat_ngram_size=2)
    generated_email = tokenizer.decode(output[0], skip_special_tokens=True)
    return generated_email

input_string = input("enter your query : ")
output_list = input_string.split(',')

generated_email = generate_email_with_keywords(output_list)

#cleaning the generated mail
generated_email = generated_email.replace("[Your Name]", '')
generated_email = generated_email.replace("[/Your Email]", '')
generated_email = generated_email.replace("Your Company", '')
generated_email = "Hello," + "\n\n" + generated_email


def send_email(sender_email, sender_password, recipient_email, subject, body):
    # Setting up the MIME
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email
    message['Subject'] = subject

    message.attach(MIMEText(body, 'plain'))

    # Connecting to the Gmail SMTP server
    with smtplib.SMTP('smtp.gmail.com', 587) as server:
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipient_email, message.as_string())

# email credentials
sender_email = "likithashh@gmail.com"
sender_password = "pqiz xpxn eeqn kshf"
recipient_email = "x22196269@student.ncirl.ie"
subject = input_string
body = generated_email

send_email(sender_email, sender_password, recipient_email, subject, body)

print("Email sent!!")